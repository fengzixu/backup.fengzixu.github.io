<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on LittleDriver</title>
    <link>http://littledriver.net/tags/docker/</link>
    <description>Recent content in Docker on LittleDriver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Oct 2018 16:16:21 +0800</lastBuildDate>
    
	<atom:link href="http://littledriver.net/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Head First Linux Namespace</title>
      <link>http://littledriver.net/posts/head-first-linux-namespace/</link>
      <pubDate>Wed, 24 Oct 2018 16:16:21 +0800</pubDate>
      
      <guid>http://littledriver.net/posts/head-first-linux-namespace/</guid>
      <description>什么是 Linux Namespace？它解决了什么问题？ 简单来说，Linux Namespace 是操作系统内核在不同进程间实现的一种「环境隔离机制」。
举例来说：现在有两个进程A，B。他们处于两个不同的 PID Namespace 下：ns1, ns2。在ns1下，A 进程的 PID 可以被设置为1，在 ns2 下，B 进程的 PID 也可以设置为1。但是它们两个并不会冲突，因为 Linux PID Namespace 对 PID 这个资源在进程 A，B 之间做了隔离。A 进程在 ns1下是不知道 B 进程在 ns2 下面的 PID 的。
这种环境隔离机制是实现容器技术的基础。因为在整个操作系统的视角下，一个容器表现出来的就是一个进程。
Linux 一共构建了 6 种不同的 Namespace，用于不同场景下的隔离：
 Mount - isolate filesystem mount points UTS - isolate hostname and domainname IPC - isolate interprocess communication (IPC) resources PID - isolate the PID number space Network - isolate network interfaces User - isolate UID/GID number spaces  Docker 的网络隔离机制——Linux Network Namespace Docker 使用的网络模型是 CNM（Container Network Model），根据官方的设计文档，它的结构大致如下：</description>
    </item>
    
  </channel>
</rss>