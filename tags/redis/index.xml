<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on LittleDriver</title>
    <link>http://littledriver.net/tags/redis/</link>
    <description>Recent content in Redis on LittleDriver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Dec 2018 20:45:33 +0800</lastBuildDate>
    
	<atom:link href="http://littledriver.net/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Head First Solution of Expired Keys in Redis</title>
      <link>http://littledriver.net/post/2018/12/09/head-first-solution-of-expired-keys-in-redis/</link>
      <pubDate>Sun, 09 Dec 2018 20:45:33 +0800</pubDate>
      
      <guid>http://littledriver.net/post/2018/12/09/head-first-solution-of-expired-keys-in-redis/</guid>
      <description>Redis 的多数据库模式 Redis Server Redis 是一个将数据保存在内存中的 key-value 数据库。很多使用 Redis 的人或许不知道，Redis 在单机数据库的实现上将总容量切分成多个「数据库</description>
    </item>
    
    <item>
      <title>Detect Redis Config File</title>
      <link>http://littledriver.net/post/2018/11/16/detect-redis-config-file/</link>
      <pubDate>Fri, 16 Nov 2018 15:41:12 +0800</pubDate>
      
      <guid>http://littledriver.net/post/2018/11/16/detect-redis-config-file/</guid>
      <description>Include Part Include include 可以允许用户在 Redis 的 Conf 文件中引用一份「已经准备好」的配置。一般来说，我们都会把一些通用的且很少变化的配置放在一个「配置模板」中，然后在</description>
    </item>
    
    <item>
      <title>Head First SDS in Redis</title>
      <link>http://littledriver.net/post/2018/10/14/head-first-sds-in-redis/</link>
      <pubDate>Sun, 14 Oct 2018 18:37:32 +0800</pubDate>
      
      <guid>http://littledriver.net/post/2018/10/14/head-first-sds-in-redis/</guid>
      <description>Redis 设计与实现之动态字符串 Q: 什么是 SDS A: SDS 是 Redis 在实现过程中使用的一种「动态字符串」。由于 Redis 的代码基本都是通过 C 语言来实现的，所以 SDS 在最底层还是依</description>
    </item>
    
    <item>
      <title>Heade First Redis Sentinel</title>
      <link>http://littledriver.net/post/2018/08/27/heade-first-redis-sentinel/</link>
      <pubDate>Mon, 27 Aug 2018 16:00:20 +0800</pubDate>
      
      <guid>http://littledriver.net/post/2018/08/27/heade-first-redis-sentinel/</guid>
      <description>WARNING: 本篇文章是在阅读了 Redis Sentinel 的设计文档之后产出的。但是由于该设计文档已经被官方标识为 draft 且时间也比较久远，笔者在阅读这份文档的时候还是发现了几处与</description>
    </item>
    
    <item>
      <title>Redis 数据持久化机制</title>
      <link>http://littledriver.net/post/2018/08/05/redis-%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 05 Aug 2018 20:11:46 +0800</pubDate>
      
      <guid>http://littledriver.net/post/2018/08/05/redis-%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</guid>
      <description>Redis 有两种持久化数据的机制 AOF： 将对数据库所有的「写操作」以追加的方式，写入一个文件当中。待 Redis 重启之后，可以通过这些指令恢复数据 RDB： 以生</description>
    </item>
    
    <item>
      <title>Redis Sentinel Explanation 1</title>
      <link>http://littledriver.net/post/2018/04/01/redis-sentinel-explanation-1/</link>
      <pubDate>Sun, 01 Apr 2018 19:49:35 +0000</pubDate>
      
      <guid>http://littledriver.net/post/2018/04/01/redis-sentinel-explanation-1/</guid>
      <description>什么是 Sentinel? Sentinel 这个词在 Redis 中有很多不同的含义，它可以代表 Redis 的一种高可用的方案，也可以代表一个以 Sentinel 模式启动的 Redis 实例，甚至是可以代表你的 Redis 集群中，多个</description>
    </item>
    
  </channel>
</rss>